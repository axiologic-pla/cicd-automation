name: 'Apply Terraform Create Infrastructure'

on:
  workflow_dispatch:
    inputs:
      networkName:
        description: 'Enter the network name'
        required: true
        type: string
      clusterAlias:
        description: 'Enter the name of your cluster'
        required: true
        type: string

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

jobs:
  applyTerraformCreateInfrastructure:
    name: 'Apply Terraform Create Infrastructure'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Set env variables
        run: |
          echo "NETWORK_PATH=./private/${{ github.event.inputs.networkName }}" >> $GITHUB_ENV
          echo "CLUSTER_PATH=./private/${{ github.event.inputs.networkName }}/${{ github.event.inputs.clusterAlias }}" >> $GITHUB_ENV
          echo "CREATE_INFRA_FOLDER_PATH=./private/${{ github.event.inputs.networkName }}/${{ github.event.inputs.clusterAlias }}/create-infrastructure" >> $GITHUB_ENV
          echo "CREATE_INFRA_TF_STATE_PATH=./private/${{ github.event.inputs.networkName }}/${{ github.event.inputs.clusterAlias }}/create-infrastructure/terraform.tfstate" >> $GITHUB_ENV       
          echo "CREATE_INFRA_TF_SCRIPTS_PATH=./pl-automation/deployments/terraform/aws-eks-create-infrastructure-pla/create-cluster" >> $GITHUB_ENV
          echo "GENERATED_CREATE_INFRA_TF_STATE_PATH=./pl-automation/deployments/terraform/aws-eks-create-infrastructure-pla/create-cluster/terraform.tfstate" >> $GITHUB_ENV
          
          echo "BOOTSTRAP_INFRA_FOLDER_PATH=./private/${{ github.event.inputs.networkName }}/${{ github.event.inputs.clusterAlias }}/bootstrap-cluster" >> $GITHUB_ENV
          echo "BOOTSTRAP_INFRA_TF_STATE_PATH=./private/${{ github.event.inputs.networkName }}/${{ github.event.inputs.clusterAlias }}/bootstrap-cluster/terraform.tfstate" >> $GITHUB_ENV       
          echo "BOOTSTRAP_INFRA_TF_SCRIPTS_PATH=./pl-automation/deployments/terraform/aws-eks-bootstrap-pla/bootstrap-cluster" >> $GITHUB_ENV
          echo "GENERATED_BOOTSTRAP_INFRA_TF_STATE_PATH=./pl-automation/deployments/terraform/aws-eks-bootstrap-pla/bootstrap-cluster/terraform.tfstate" >> $GITHUB_ENV
          
          echo "REGION_FILE_PATH=./private/${{ github.event.inputs.networkName }}/${{ github.event.inputs.clusterAlias }}/region" >> $GITHUB_ENV
          echo "ELASTIC_IP_ALLOCATION_ID_PATH=./private/${{ github.event.inputs.networkName }}/${{ github.event.inputs.clusterAlias }}/elasticIPsAllocationIds" >> $GITHUB_ENV
      # Checkout the repository to the GitHub Actions runner
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.TOKEN }}

      - name: Read elasticIpAllocationId and region
        run: |
          echo "REGION=$(cat $REGION_FILE_PATH)" >> $GITHUB_ENV
          echo "ELASTIC_IP_ALLOCATION_ID=$(cat $ELASTIC_IP_ALLOCATION_ID_PATH)" >> $GITHUB_ENV
      - name: Clone pl-automation
        run: |
          git clone https://github.com/drajcan/pl-automation.git
      
      - name: Configure AWS Credentials Action For GitHub Actions
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_GH_ACTIONS_ROLE }}
          aws-region: ${{env.REGION}}

      - name: 'Move terraform.tfstate to ./pl-automation/deployments/terraform/aws-eks-infrastructure-pla/create-cluster if it exists'
        run: |
          if test -f $CREATE_INFRA_TF_STATE_PATH; then
            mv $CREATE_INFRA_TF_STATE_PATH $CREATE_INFRA_TF_SCRIPTS_PATH
          fi
      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.

      - name: Terraform Init
        run: terraform -chdir=$CREATE_INFRA_TF_SCRIPTS_PATH init

      - name: Terraform Apply infra
        run: terraform -chdir=$CREATE_INFRA_TF_SCRIPTS_PATH apply -auto-approve -input=false
        env:
          TF_VAR_eks_aws_auth_roles: ${{ secrets.EKS_AWS_AUTH_ROLES }}
          TF_VAR_eks_aws_auth_users: ${{ secrets.EKS_AWS_AUTH_USERS }}
          TF_VAR_account_id: ${{ secrets.ACCOUNT_ID }}
          TF_VAR_region: ${{env.REGION}}
          TF_VAR_vpc_external_nat_ip_ids: ${{env.ELASTIC_IP_ALLOCATION_ID}}
          TF_VAR_eks_cluster_name: ${{ github.event.inputs.clusterAlias }}
          TF_VAR_vpc_single_nat_gateway: true
          TF_VAR_vpc_one_nat_gateway_per_az: false
          
      - name: 'Commit terraform.tfstate'
        run: |
          git config --global user.email ${{ secrets.GIT_EMAIL }}
          git config --global user.name ${{ secrets.GIT_USERNAME }}
          ls -la ./private/${{ github.event.inputs.networkName }}
          git pull
          git add -f $TERRAFORM_STATE_PATH
          git commit -m "Updated terraform.tfstate"
          git push origin master
